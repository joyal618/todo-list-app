[{"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/index.tsx":"1","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/reportWebVitals.ts":"2","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/App.tsx":"3","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/redux/todo/todoReducer.tsx":"4","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/redux/todo/todoTypes.tsx":"5","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/home/Home.tsx":"6","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/list-task/ListTask.tsx":"7","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/input-task/InputTask.tsx":"8","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/redux/todo/todoAction.tsx":"9","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/todo-items/TodoItem.tsx":"10","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/client.tsx":"11","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/graphQL/mutations.tsx":"12","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/graphQL/queries.tsx":"13"},{"size":807,"mtime":1612980068000,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1612961101000,"results":"16","hashOfConfig":"15"},{"size":713,"mtime":1613021710320,"results":"17","hashOfConfig":"15"},{"size":1555,"mtime":1612976552000,"results":"18","hashOfConfig":"15"},{"size":321,"mtime":1611730211000,"results":"19","hashOfConfig":"15"},{"size":404,"mtime":1613021111195,"results":"20","hashOfConfig":"15"},{"size":963,"mtime":1612981746000,"results":"21","hashOfConfig":"15"},{"size":3720,"mtime":1612982033000,"results":"22","hashOfConfig":"15"},{"size":3200,"mtime":1612981424000,"results":"23","hashOfConfig":"15"},{"size":5091,"mtime":1612982744000,"results":"24","hashOfConfig":"15"},{"size":175,"mtime":1611550128000,"results":"25","hashOfConfig":"15"},{"size":737,"mtime":1612961101000,"results":"26","hashOfConfig":"15"},{"size":165,"mtime":1612961101000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"186slo7",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/index.tsx",[],["60","61"],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/reportWebVitals.ts",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/App.tsx",["62","63"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport Home from './components/home/Home'\n\nimport { ApolloProvider } from '@apollo/client';\nimport { Route, BrowserRouter } from \"react-router-dom\";\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache()\n});\n\n\n\n\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <ApolloProvider client={client}>\n        <BrowserRouter>\n          <Route exact path=\"/\" component={Home} />\n        </BrowserRouter>\n\n      </ApolloProvider>\n    </div>\n\n  );\n}\n\nexport default App;\n","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/redux/todo/todoReducer.tsx",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/redux/todo/todoTypes.tsx",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/home/Home.tsx",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/list-task/ListTask.tsx",["64","65","66","67","68","69"],"import \"./ListTask.css\"\n\nimport TodoItem from \"../todo-items/TodoItem\";\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { gql, useQuery } from '@apollo/client';\n\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\n\n\n\n\nconst GET_TODOS = gql`\n  query {\n    getTasks {\n        id\n        title\n        description\n        completedDate\n    }\n}`\n\n\n\n\n\n\n\n\n\n\n\nfunction ListTask (){\n  const [todos, setTodo] = useState<[]>()\n  const { loading, error, data } = useQuery(GET_TODOS) as any;\n\n  useEffect(() => {\n    console.debug(\"USEEFFECT\");\n    console.log(data);\n    if (data) {\n      setTodo(data.getTasks)\n    }\n\n  }, [data])\n  // const todos = [{title: 'new', id : 1}, {title: 'old', id: 2}]\n  return (\n    <div className=\"main-display\">\n\n      {todos && todos.map((task: any) => (\n        <TodoItem key={task.id} todo={task} />\n\n\n      ))}\n    </div>)\n}\n\nexport default ListTask;","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/input-task/InputTask.tsx",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/redux/todo/todoAction.tsx",["70"],"// import { useQuery } from '@apollo/client';\n// import { GET_TODOS } from '../../graphQL/queries'\nimport { ADD_TODO } from '../../graphQL/mutations'\nimport { GET_TODO_DATA, GET_TODO_DATA_SUCCESS, GET_TODO_DATA_FAILURE } from './todoTypes'\nimport { ADD_TODO_DATA, ADD_TODO_SUCCESS, ADD_TODO_FAILURE } from './todoTypes'\nimport { client } from '../../client'\nimport { gql } from '@apollo/client';\nimport { title } from 'process';\n\nexport const addTodo = (title:any, description:any) =>{\n  console.log(\"addTodo\")\n  return (dispatch : any) => {\n    client\n    .mutate({\n      mutation: ADD_TODO,\n      variables: { \n        title: title,\n        description: description\n      },\n    })\n    .then((data) => {\n      console.log(data)\n      dispatch(addTaskRequest)\n\n      client\n        .query({\n          query: gql`\n            query {\n              getTasks {\n                id\n                title\n                description\n              }\n            }\n        `\n      })\n      .then(result => {\n        // response.data is the users\n        const todos = result;\n        console.log(\"todos\")\n        console.log(todos.data.getTasks)\n        dispatch(addTaskSuccess(todos.data.getTasks))\n      })\n      .catch(error => {\n        console.debug(\"catch ERROR\");\n        // error.message is the error message\n        dispatch(addTaskFailure(error.message))\n      })\n    })\n\n    .catch((error) => {\n      console.log(error)\n    })\n      \n    // const { loading, error, data } = useQuery(GET_TODOS) as any;\n    }\n}\n\n\nexport const fetchData = () => {\n  console.log(\"Action done\")\n  return (dispatch: any) => {\n    dispatch(fetchTasksRequest)\n    // const { loading, error, data } = useQuery(GET_TODOS) as any;\n    client\n      .query({\n        query: gql`\n          query {\n            getTasks {\n              id\n              title\n              description\n              createdDate\n              completedDate\n            }\n          }\n      `\n    })\n    .then(result => {\n      // response.data is the users\n      const todos = result;\n      console.log(\"todos\")\n      console.log({todos})\n      console.log(todos.data.getTasks)\n      dispatch(fetchTasksSuccess(todos.data.getTasks))\n    })\n    .catch(error => {\n      // error.message is the error message\n      dispatch(fetchTasksFailure(error.message))\n    })\n  }\n}\n\n\nexport const fetchTasksRequest = () => {\n  console.log(\"called fetchTasksRequest\")\n  return {\n    type: GET_TODO_DATA\n  }\n}\n\nexport const fetchTasksSuccess = (todos:any) => {\n  console.log(\"called fetchTasksSuccess\")\n  return {\n    type: GET_TODO_DATA_SUCCESS,\n    payload: todos\n  }\n}\n\nexport const fetchTasksFailure = (error:any) => {\n  console.log(\"called fetchTasksFailure\")\n  return {\n    type: GET_TODO_DATA_FAILURE,\n    payload: error\n  }\n}\n\n\nexport const addTaskRequest = () => {\n  console.log(\"called addTaskRequest\")\n  return {\n    type: ADD_TODO_DATA,\n  }\n}\n\nexport const addTaskSuccess = (todos:any) => {\n  console.log(\"called addTaskSuccess\")\n  return {\n    type: ADD_TODO_SUCCESS,\n    payload: todos\n  }\n}\n\nexport const addTaskFailure = (error:any) => {\n  console.log(\"called addTaskFailure\")\n  return {\n    type: ADD_TODO_FAILURE,\n    payload: error\n  }\n}\n\n\n\n\n\n","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/components/todo-items/TodoItem.tsx",["71","72","73","74"],"import { useMutation  } from '@apollo/client';\nimport { DELETE_TODO, UPDATE_TODO, COMPLETED_TODO } from '../../graphQL/mutations'\nimport { GET_TODOS } from '../../graphQL/queries';\n\n\nimport \"./TodoItem.css\";\nimport React,{useState} from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';;\n\n\n\n\n\n\nconst TodoItem = (props: any) => {\n    console.debug({props});\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n    const [title, setTitle] = useState(props.todo.title)\n    const [description, setDescription] = useState('')\n\n    const [completed, setCompleted] = useState(false)\n    const [removeTask, { error, data }] = useMutation<{ removeTask: string }, { id: number}>(DELETE_TODO); \n    const [updateTask, { }] = useMutation<{ updateTask: string }, { id: number, title: string, description: string}>(UPDATE_TODO); \n    const [markAsCompleted, {  }] = useMutation<{ markAsCompleted: string }, { id: number}>(COMPLETED_TODO); \n\n    const handleDelete = () => {\n        console.log(props.todo.id)\n        removeTask({ \n            variables: { \n                id: props.todo.id,\n            },\n            refetchQueries: [{ query: GET_TODOS }]\n        }); \n        console.log(\"end \")\n \n    }\n\n    const onUpdateDone = () => {\n        \n        updateTask({ \n            variables: { \n                id: props.todo.id,\n                title: title,\n                description : description\n            },\n            refetchQueries: [{ query: GET_TODOS }]\n        }); \n        console.log(\"end \")\n        setOpen(false);\n    }\n\n    const handleCompleted = () => {\n        console.log(\"in handleCompleted\");\n        setCompleted(true)\n        markAsCompleted({ \n            variables: { \n                id: props.todo.id,\n            },\n            refetchQueries: [{ query: GET_TODOS }]\n        }); \n        console.log(completed)\n    }\n\n  \n    \n    \n\n\n\n\n    return (\n        // <h1>{props.todo.title}</h1>\n        <>\n            <div className=\"todo-items-container\">\n                <div className=\"td-container\">\n                    <div className=\"td\">\n                        {props.todo.title}\n                    </div>\n                    <div className=\"td\">\n                        {props.todo.description}\n                    </div>\n                </div>\n                {props.todo.completedDate ?\n                <div className=\"todo-buttons\">\n                    <Button id=\"delete\" variant=\"contained\" color=\"secondary\" onClick={handleDelete}>Delete</Button>\n                    <Button id=\"completed\" disabled >Completed</Button>\n                </div>\n                : \n                <div className=\"todo-buttons\">\n                <Button id=\"update\" variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>Update</Button>\n                <Button id=\"delete\" variant=\"contained\" color=\"secondary\" onClick={handleDelete}>Delete</Button>\n                <Button id=\"completed\" variant=\"contained\" className=\"completed-button\" onClick={handleCompleted}>Completed</Button>\n            </div>\n\n}   \n            </div>\n\n\n\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Update Task</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        To update the task, please enter the task title and task description here. We will update the corresponding task details.\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Task title\"\n                        type=\"title\"\n                        fullWidth\n                        onChange={(e) => setTitle(e.target.value)}\n                    />\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Task Description\"\n                        type=\"description\"\n                        fullWidth\n                        onChange={(e) => setDescription(e.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={onUpdateDone} color=\"primary\">\n                        Update Task\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n\n        </>\n    )\n}\n\n\nexport default TodoItem;","/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/client.tsx",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/graphQL/mutations.tsx",[],"/home/dxuser/Documents/Programs/ToDoListApplication/frontend/my-app/src/graphQL/queries.tsx",[],["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":12},{"ruleId":"81","severity":1,"message":"85","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":16},{"ruleId":"81","severity":1,"message":"86","line":5,"column":17,"nodeType":"83","messageId":"84","endLine":5,"endColumn":25},{"ruleId":"81","severity":1,"message":"87","line":6,"column":10,"nodeType":"83","messageId":"84","endLine":6,"endColumn":29},{"ruleId":"81","severity":1,"message":"88","line":10,"column":10,"nodeType":"83","messageId":"84","endLine":10,"endColumn":22},{"ruleId":"81","severity":1,"message":"89","line":10,"column":24,"nodeType":"83","messageId":"84","endLine":10,"endColumn":37},{"ruleId":"81","severity":1,"message":"90","line":38,"column":11,"nodeType":"83","messageId":"84","endLine":38,"endColumn":18},{"ruleId":"81","severity":1,"message":"91","line":38,"column":20,"nodeType":"83","messageId":"84","endLine":38,"endColumn":25},{"ruleId":"81","severity":1,"message":"92","line":8,"column":10,"nodeType":"83","messageId":"84","endLine":8,"endColumn":15},{"ruleId":"81","severity":1,"message":"91","line":38,"column":26,"nodeType":"83","messageId":"84","endLine":38,"endColumn":31},{"ruleId":"81","severity":1,"message":"93","line":38,"column":33,"nodeType":"83","messageId":"84","endLine":38,"endColumn":37},{"ruleId":"94","severity":1,"message":"95","line":39,"column":24,"nodeType":"96","messageId":"97","endLine":39,"endColumn":27},{"ruleId":"94","severity":1,"message":"95","line":40,"column":29,"nodeType":"96","messageId":"97","endLine":40,"endColumn":33},{"ruleId":"77","replacedBy":"98"},{"ruleId":"79","replacedBy":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Fragment' is defined but never used.","'RouteComponentProps' is defined but never used.","'ApolloClient' is defined but never used.","'InMemoryCache' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'title' is defined but never used.","'data' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["100"],["101"],"no-global-assign","no-unsafe-negation"]